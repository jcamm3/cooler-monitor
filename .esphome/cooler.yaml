
#**************************************************************
#  Project:           Cooler Monitor
#  Device/Board:      ESP32-C3 (ESP32-C3-DevKitM-1)
#  Version:           1.1.0
#  Author:            John Camm
#  Last Updated:      2025-06-18
#**************************************************************
#  DESCRIPTION
#    Controls temperature in a cold storage room using a heater
#    and external fans. Monitors Dallas 1-Wire temperature sensors
#    and includes OLED display with real-time status. Features
#    runtime-settable target, margin, and hysteresis. Visual status
#    indication via onboard RGB LED (green/blue/red flashing).
#**************************************************************
#  DEVICE SPECIFICATIONS
#
#  - Board: ESP32-C3-DevKitM-1
#  - Temperature Sensors: DS18B20 1-Wire (Room, Fins, Outside)
#  - OLED Display: SSD1306 128x64 I2C
#  - Onboard Neopixel LED for status indication
#  - GPIO Relays: Heater (AC) and Outside Fans
#
#**************************************************************
#  SENSOR SPECIFICATIONS
#
#  - DS18B20 Digital Temperature Sensors (1-Wire)
#      - Quantity: 3 (Room, Fins, Outside)
#      - Range: -55°C to +125°C (-67°F to +257°F)
#      - Accuracy: ±0.5°C over -10°C to +85°C
#  - Internal ESP32 Temperature Sensor (for diagnostics)
#  - Uptime and Wi-Fi diagnostic sensors
#
#**************************************************************
#  GPIO PIN ASSIGNMENTS
#
#  - GPIO04: Heater (AC) Relay Output
#  - GPIO05: Outside Fans Relay Output
#  - GPIO07: I2C SCL (OLED Display)
#  - GPIO09: I2C SDA (OLED Display)
#  - GPIO08: Neopixel (Onboard LED)
#  - GPIO10: 1-Wire Bus (DS18B20 Temperature Sensors)
#
#**************************************************************
#  CHANGELOG
#
#  v1.0.0 (2025-06-09)
#    - Initial release for Smart Cooler.
#    - Core logic for relay/temperature/fan control.
#    - OLED status display with multi-page info.
#    - Web server & Home Assistant integration.
#    - Runtime configuration for setpoint, hysteresis, and margin.
#    - Secure OTA and API integration.
#
#**************************************************************
# === ESPHome Core Configuration ===
esphome:
  name: "cooler"
  friendly_name: "smart cooler"
  comment: Controls temperature in a cold storage room using a heater and external fans (esp32-c3)
  on_boot:
    priority: -100
    then:
      - if:
          condition:
            lambda: "return isnan(id(room_temp).state);"
          then:
            - switch.turn_off: heater
            - switch.turn_off: ext_fans
            - logger.log: "Sensor read failure on boot. Relays disabled."

# === Hardware Details ===
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# === Logging Configuration ===
# Enable logging to monitor the device's behavior.
logger:
  level: WARN

# Enable Home Assistant API
api:
  encryption:
    key: "npNsh6z9e9aMCMLCA3IfIbtKj+UXENgpEzlTTCJv6b0="

ota:
  - platform: esphome
    password: "1ac55e20fc5b8f4773f39eb4f8e71160"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Cooler Fallback Hotspot"
    password: "WjnNQcgFXpD0"

# === Captive Portal ===
# Enable a fallback interface for device setup if Wi-Fi fails.
captive_portal:

# === Web Server ===
# Set up a web server for direct control and monitoring, with authentication.
web_server:
  version: 3
  auth:
    username: saintmoor
    password: saintmoor
  log: true
  sorting_groups:
    - id: relay_settings
      name: "Relays"
      sorting_weight: -25
    - id: temperature_settings
      name: "Temperature"
      sorting_weight: -20
    - id: set_point_settings
      name: "Setpoints"
      sorting_weight: -15
    - id: state_settings
      name: "Status"
      sorting_weight: -10

# === HTTP Request ===
# Enable HTTP requests for external integrations.
http_request:
  useragent: esphome/device
  timeout: 10s
  verify_ssl: false

# === Time Synchronization ===
# Synchronize the device time with NTP servers.
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# === Global Variables ===
# Define global variables to store and manage device states.
globals:
  - id: ac_state # Tracks whether the AC (or heater) is active.
    type: bool
    initial_value: 'false'
  - id: fan_state # Tracks whether the fan is active.
    type: bool
    initial_value: 'false'
  - id: deadband_state  # Manages the deadband logic to prevent rapid toggling.
    type: bool
    initial_value: 'false'
  - id: power_state # Tracks whether power is active.
    type: bool
    initial_value: 'true'
  - id: freeze_recovery # Indicates if freeze recovery mode is active.
    type: bool
    initial_value: 'false'
  - id: target # Target Temperature (setpoint).
    type: float
    initial_value: '34.0'
  - id: hysteresis # Temperature hysteresis range to avoid frequent toggling.
    type: float
    initial_value: '1.0'
  - id: margin # Safety margin to prevent fins from freezing.
    type: float
    initial_value: '4.0'

# === Number Controls ===
# Define configurable settings for temperature setpoints and hysteresis.
number:
  - platform: template
    name: "Target Temperature" # Target room temperature.
    id: target_temp
    unit_of_measurement: "°F"
    icon: "mdi:temperature-fahrenheit"
    optimistic: true
    min_value: 34
    max_value: 121
    step: 1
    initial_value: 34
    restore_value: true
    web_server:
      sorting_group_id: set_point_settings
  - platform: template
    name: "Hysteresis Range" # Range for temperature hysteresis.
    id: hysteresis_range
    unit_of_measurement: "°F"
    icon: "mdi:temperature-fahrenheit"
    optimistic: true
    min_value: 0.0
    max_value: 2.0
    step: 0.5
    initial_value: 0.5
    restore_value: true
    web_server:
      sorting_group_id: set_point_settings
  - platform: template
    name: "Freeze Recovery Margin" # Range for freezing temperature value addition.
    id: safety_margin
    unit_of_measurement: "°F"
    icon: "mdi:temperature-fahrenheit"
    optimistic: true
    min_value: 0
    max_value: 4
    step: 1
    initial_value: 4
    restore_value: true
    web_server:
      sorting_group_id: set_point_settings

# === 1-Wire Sensors ===
# Configure temperature sensors for monitoring room, fins, and outside temperatures.
one_wire:
  - platform: gpio
    pin: GPIO10
    id: dallas_1

# === i2c Sensors ===
# Configure temperature sensors for monitoring room, fins, and outside temperatures.  
i2c:
  sda: 9
  scl: 7
  scan: true
  id: bus_a
  frequency: 400kHz

# === LED Control ===
# Configure an onboard LED with color effects for status indication.
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO08
    name: "Onboard LED"
    id: onboard_led
    icon: "mdi:led-strip"
    num_leds: 1
    restore_mode: ALWAYS_ON
    on_turn_on:
      then:
        - light.control:
            brightness: 25%
            id: onboard_led
            effect: Green
    effects:
      - addressable_color_wipe:
          name: "Solid Red"
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid Green"
          colors:
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid Blue"
          colors:
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid White"
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
          reverse: false
      - strobe:
          name: "Blink Blue"
          colors:
            - state: True
              red: 0%
              green: 0%
              blue: 100%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink Green"
          colors:
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink Red"
          colors:
            - state: True
              red: 100%
              green: 0%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink White"
          colors:
            - state: True
              red: 100%
              green: 100%
              blue: 100%
              duration: 500ms
            - state: False
              duration: 500ms
      - addressable_rainbow:
          name: "Rainbow Effect"
          speed: 10
          width: 50

# === Binary Sensors ===
# Monitor various states, such as AC, fan, and freeze recovery status.
binary_sensor:
  - platform: status
    name: "Status"
    icon: "mdi:state-machine"
  - platform: template
    name: "AC State"
    id: ac_state_value
    icon: "mdi:earth"
    lambda: |-
      if (id(ac_state)) {
        return true;      
      } else {
        return false;
      }
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "FAN State"
    id: fan_state_value
    icon: "mdi:earth"
    lambda: |-
      if (id(fan_state)) {
        return true;      
      } else {
        return false;
      }
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "DEADBAND State"
    id: deadband_state_value
    icon: "mdi:earth"
    lambda: |-
      if (id(deadband_state)) {
        return true;      
      } else {
        return false;
      }
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Freeze Recovery"
    id: freeze_recovery_value
    icon: "mdi:earth"
    lambda: |-
      if (id(freeze_recovery)) {
        return true;      
      } else {
        return false;
      }
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Power State"
    id: power_state_value
    icon: "mdi:earth"
    internal: false
    lambda: |-
      if (id(power_state)) {
        return true;      
      } else {
        return false;
      }
    web_server:
      sorting_group_id: state_settings

# === Main Logic ===
# Control relays and temperature settings based on sensor data and state variables.
interval:
  - interval: 10s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display
- interval: 15s
  then:
    - lambda: |-
        // Threshold calculations
        float upper = id(target) + id(hysteresis);
        float lower = id(target) - id(hysteresis);

        // Sensor state snapshots
        float ext = id(ext_temp).state;
        float room = id(room_temp).state;
        float fins = id(fins_temp).state;

        // Boolean state flags
        bool ac = id(ac_state);
        bool fan = id(fan_state);
        bool deadband = id(deadband_state);
        bool recovery = id(freeze_recovery);
        bool power = id(power_switch).state;
        bool freezing = fins <= 32.0;

        bool ext_cooling = ext <= (room - 20);
        bool above_upper = room > upper;
        bool below_lower = room <= lower;
        bool above_target = room > id(target_temp).state;

        if (power) {
          // === External Cooling ===
          if (ext_cooling && above_upper && !recovery) {
            if (ac) {
              ESP_LOGD("logic", "FANS are on; turning off heater.");
              id(heater).turn_off();
              id(ac_state) = 0;
            }
            id(ext_fans).turn_on();
            id(fan_state) = 1;
            ESP_LOGW("logic", "FANS are running.");
          } else {
            id(ext_fans).turn_off();
            id(fan_state) = 0;
          }

          // === Heater Control with Hysteresis ===
          if (deadband && !freezing && room >= upper && !recovery) {
            ESP_LOGW("logic", "Room above upper threshold; turning on heater (AC running).");
            id(heater).turn_on();
            id(ac_state) = 1;
            id(deadband_state) = 0;
          } else if (!freezing && !deadband && above_target && !recovery) {
            ESP_LOGW("logic", "Room above target; keeping heater on (AC running).");
            id(heater).turn_on();
            id(ac_state) = 1;
          } else if (below_lower) {
            ESP_LOGW("logic", "Room below lower threshold; turning off heater and AC. Deadband entered.");
            id(heater).turn_off();
            id(ac_state) = 0;
            id(deadband_state) = 1;
            id(ext_fans).turn_off();
            id(fan_state) = 0;
          }
          id(power_state) = 1;

        } else {
          // === System Off ===
          ESP_LOGW("logic", "Power is off. System is not running.");
          id(power_state) = 0;
          id(heater).turn_off();
          id(ac_state) = 0;
          id(deadband_state) = 0;
          id(ext_fans).turn_off();
          id(fan_state) = 0;
        }

#=====CONFIG FOR OLED====#
# Control display output for sensor and state information.
font:
  - file: 'fonts/arial.ttf'
    id: arial_medium
    size: 14
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_medium
    size: 12
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_small
    size: 10
  - file: "gfonts://Roboto" # gfonts://family[@weight]
    id: roboto
    size: 20
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 15
  - file: "gfonts://Roboto"
    id: roboto_small
    size: 12
  - file: "gfonts://Roboto"
    id: roboto_smallest
    size: 10
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_large
    size: 48
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_medium
    size: 32
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_medium
    size: 10
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_small
    size: 8
  - file: 'fonts/arial.ttf'
    id: arial_large
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    i2c_id: bus_a
#    reset_pin: D0
    id: oled_display
    auto_clear_enabled: True
    show_test_card: true
#    update_interval: 5s
    pages:
      - id: page1 
        lambda: |-
          // it.printf(X, Y,.. (X (Row) and Y (Column)) 
          // Print "Smart Cooler" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Smart Cooler");
          // Print time in HH:MM format
          it.strftime(0, 60, id(bebasneue_large), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          // Print ROOM temperature
          if (id(room_temp).has_state()) {
          it.printf(127, 23, id(arial_medium), TextAlign::TOP_RIGHT, "%.1f°", id(room_temp).state);
          }
          // Print Target temperature
          if (id(target_temp).has_state()) {
          it.printf(127, 60, id(arial_medium), TextAlign::BASELINE_RIGHT, "%.1f°", id(target_temp).state);
          }
      - id: page2
        lambda: |-
          // Print "Currently Running" in the top center
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Currently Running");
          // Determine the text to display
          std::string status_text;
          if (id(ac_state)) {
          status_text = "AC";
          } else if (id(fan_state)) {
          status_text = "FANS";
          } else if (id(deadband_state)) {
          status_text = "DEADBAND";
          } else if (id(freeze_recovery)) {
          status_text = "FREEZE";
          } else {
          status_text = "OFF";
          }
          // Print the status text centered at the bottom
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_medium), TextAlign::BASELINE_CENTER, "%s", status_text.c_str());
      - id: page3 
        lambda: |-
          // Print "Target Temp" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Target Temp");
          // Print Target temperature in baseline center
          if (id(target_temp).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(target_temp).state);
          }
      - id: page4
        lambda: |-
          // Print "Room Temp" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Room Temp");
          // Print Room temperature in baseline center
          if (id(room_temp).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(room_temp).state);
          }
      - id: page5
        lambda: |-
          // Print "FINS Temp" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Fins Temp");
          // Print Room temperature in baseline center
          if (id(fins_temp).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(fins_temp).state);
          }
      - id: page6
        lambda: |-
          // Print "Outside Temp" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Outside Temp");
          // Print Outside temperature in baseline center
          if (id(ext_temp).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(ext_temp).state);
          }
      - id: page7
        lambda: |-
          // Print "Hysteresis" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Hysteresis");
          // Print Hystereis Range in baseline center
          if (id(hysteresis_range).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(hysteresis_range).state);
          }
      - id: page8
        lambda: |-
          // Print "Recovery Margin" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Recovery Margin");
          // Print Freeze Recovery Margin in baseline center
          if (id(safety_margin).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(safety_margin).state);
          }

# === Sensors ===
# Read and display temperature sensor values.
sensor:
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 5s
  - platform: internal_temperature
    name: "Internal Temperature" # ESP32 internal temperature in °F
    id: "internal_temperature_f"
    unit_of_measurement: "°F"
    icon: "mdi:temperature-fahrenheit"
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
  - platform: dallas_temp
    address: 0x690417a1115aff28 # ROOM_SENSOR
    one_wire_id: dallas_1
    name: " Room Temperature" 
    id: room_temp
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10s
    resolution: 9
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
    unit_of_measurement: "°F"
    on_value_range:
      - above: 125
        then:
          - logger.log:
              level: ERROR
              format: "Sensor reading too high! Value: %.2f"
              args: [x]
          - delay: 30s
          - logger.log: "Retrying sensor..."
    web_server:
      sorting_group_id: temperature_settings
  - platform: dallas_temp
    address: 0x990417a10ca3ff28 # FINS_SENSOR
    one_wire_id: dallas_1
    name: "Fins Temperature" 
    id: fins_temp
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10s
    resolution: 9
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
    unit_of_measurement: "°F"
    on_value_range:
      - above: 125
        then:
          - logger.log:
              level: ERROR
              format: "Sensor reading too high! Value: %.2f"
              args: [x]
          - delay: 30s
          - logger.log: "Retrying sensor..."
    web_server:
      sorting_group_id: temperature_settings
  - platform: dallas_temp
    address: 0x0e0417a116ffff28 # EXT_SENSOR
    one_wire_id: dallas_1
    name: "Outside Temperature" 
    id: ext_temp
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 10s
    resolution: 9
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
    unit_of_measurement: "°F"
    on_value_range:
      - above: 125
        then:
          - logger.log:
              level: ERROR
              format: "Sensor reading too high! Value: %.2f"
              args: [x]
          - delay: 30s
          - logger.log: "Retrying sensor..."
    web_server:
      sorting_group_id: temperature_settings

# == Other Sensors ==
# Configure target temp, and other sensors
  - platform: template
    name: "Target Temp"
    id: target_temp_value
    icon: "mdi:earth"
    lambda: |-
      return id(target_temp).state;
    on_value:
      then:
        - globals.set:
            id: target
            value: !lambda 'return x;'
    update_interval: 5s
    unit_of_measurement: "°F"
    accuracy_decimals: 0
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Hysteresis"
    id: hysteresis_range_value
    icon: "mdi:earth"
    lambda: |-
      return id(hysteresis_range).state;
    on_value:
      then:
        - globals.set:
            id: hysteresis
            value: !lambda 'return x;'
    update_interval: 5s
    unit_of_measurement: "°F"
    accuracy_decimals: 1
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Freeze Recovery Temp"
    id: recovery_temp
    icon: "mdi:earth"
    lambda: |-
      return 32.0 + id(safety_margin).state;
    on_value:
      then:
        - globals.set:
            id: margin
            value: !lambda 'return x;'
    update_interval: 5s
    unit_of_measurement: "°F"
    accuracy_decimals: 0
    web_server:
      sorting_group_id: state_settings

# === Switches ===
# Control relays for heater and outside fans.
switch:
  - platform: restart
    name: "Restart"
  - platform: gpio
    pin: GPIO04
    id: heater
    name: "Heater (AC)"
    icon: "mdi:radiator"
    restore_mode: ALWAYS_OFF
    interlock: [ext_fans]
    on_turn_on:
      - logger.log: "Heater (AC) Turned On!"
    on_turn_off:
      - logger.log: "Heater (AC) Turned Off!"
    web_server:
      sorting_group_id: relay_settings
  - platform: gpio
    pin: GPIO05
    id: ext_fans
    name: "External Fans"
    icon: "mdi:fan"
    restore_mode: ALWAYS_OFF
    interlock: [heater]
    on_turn_on:
      - logger.log: "Outside Fans Turned On!"
    on_turn_off:
      - logger.log: "Outside Fans Turned Off!"
    web_server:
      sorting_group_id: relay_settings
  - platform: template
    name: "OLED Display"
    id: oled_display_sw
    optimistic: True
    restore_mode: ALWAYS_ON
    on_turn_on:
      - lambda: id(oled_display).turn_on();
    on_turn_off:
      - lambda: id(oled_display).turn_off();
  - platform: template
    name: "  Power Switch"
    id: power_switch
    icon: "mdi:power"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "Power Turned On!"
      - light.turn_on: 
          id: onboard_led
          brightness: 25%
          effect: "Solid Green"
      - switch.turn_on: oled_display_sw
    turn_off_action:
      - logger.log: "Power Turned Off!"
      - light.turn_on:
          id: onboard_led
          brightness: 25%
          effect: "Solid Red"
      - switch.turn_off: oled_display_sw
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Enable Deadband (Manual)"
    id: deadband_enabled
    lambda: "return id(deadband_state);"
    turn_on_action:
      - lambda: "id(deadband_state) = true;"
    turn_off_action:
      - lambda: "id(deadband_state) = false;"
    web_server:
      sorting_group_id: set_point_settings

# === Scripts ===
# Define scripts for handling specific tasks, like freeze recovery.
script:
  - id: freeze_recovery_script
    mode: queued
    then:
      - lambda: |-
          id(freeze_recovery) = true;
          ESP_LOGW("freeze_recovery", "Starting freeze recovery process.");
      - switch.turn_off: heater
      - switch.turn_off: ext_fans
      - delay: 60s
      - while:
          condition:
            lambda: "return id(fins_temp).state <= 32.0 + id(safety_margin).state;"
          then: # Logic to recover from fins freezing.
            - delay: 60s
      - lambda: |-
          id(freeze_recovery) = false;
          ESP_LOGI("freeze_recovery", "Recovery process complete.");

# === Text Sensors ===
# Provide network-related information (e.g., IP, SSID, MAC address) for diagnostics.
text_sensor:
  - platform: template
    name: " Currently Running"
    id: currently_running
    icon: "mdi:earth"
    lambda: |-
      if (id(ac_state)) {
        return {"AC"};
      } else if (id(fan_state)) {
        return {"Fans"};
      } else if (id(deadband_state)) {
        return {"Deadband"};
      } else if (id(freeze_recovery)) {
        return {"Freeze Recovery"};
      } else {
        return {"Off"};
      }
    update_interval: 5s
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: " Room Status"
    id: pressure_status
    icon: "mdi:earth"
    lambda: |-
      float upper_threshold = id(target) + id(hysteresis);
      float lower_threshold = id(target) - id(hysteresis);
      float outside_temp = id(ext_temp).state;
      float cooler_temp = id(room_temp).state;
      bool is_ac_active = id(ac_state);
      bool is_fan_active = id(fan_state);
      bool is_deadband_active = id(deadband_state);
      bool is_freezing = id(fins_temp).state <= 32.0;
      bool is_freeze_recovery_active = id(freeze_recovery);
      bool is_power_on = id(power_state);
      bool is_ext_temp_cooling = outside_temp <= (cooler_temp - 20);
      bool is_room_above_upper = cooler_temp > upper_threshold;
      bool is_room_below_lower = cooler_temp <= lower_threshold;

      if (is_ext_temp_cooling && is_room_above_upper && !is_freeze_recovery_active) {
        return {"Ok"};
      } else if (is_deadband_active && !is_freezing && id(room_temp).state >= upper_threshold && !is_freeze_recovery_active) {
        return {"Above Target"};
      } else if (!is_freezing && !is_deadband_active && id(room_temp).state > id(target_temp).state && !is_freeze_recovery_active) {
        return {"Above Target"};
      } else if (is_room_below_lower && is_ac_active) {
        return {"Below Target"};
      } else if (is_room_below_lower && !is_ac_active) {
        return {"Below Target"};
      } else {
        return {"Ok"};
      }
    update_interval: 5s
    web_server:
      sorting_group_id: temperature_settings
  - platform: template
    name: "Uptime (formatted)"
    icon: "mdi:timer-outline"
    entity_category: "diagnostic"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      uint32_t dys = 0;
      uint32_t hrs = 0;
      uint32_t mnts = 0;
      if (dur >= 86400) {
        dys = dur / 86400;
        dur %= 86400;
      }
      if (dur >= 3600) {
        hrs = dur / 3600;
        dur %= 3600;
      }
      if (dur >= 60) {
        mnts = dur / 60;
        dur %= 60;
      }
      char buffer[32];  // Increased size to handle larger strings safely
      snprintf(buffer, sizeof(buffer), "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    update_interval: 1s
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: "mdi:ip"
    ssid:
      name: "Connected SSID"
      icon: "mdi:wifi"
